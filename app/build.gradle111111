import com.android.build.api.variant.ApplicationAndroidComponentsExtension
import com.ghl.plugin.ModuleServicePlugin
import com.ghl.plugin.RouterPlugin

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
}
apply plugin: RouterPlugin
apply plugin: ModuleServicePlugin
apply plugin: CustomPlugin

def app_android = rootProject.ext.android
def app_implementation = rootProject.ext.app_implementation

configurations {
    profileImplementation {

    }
}

android {
//    packagingOptions {
//        exclude 'META-INF/DEPENDENCIES'
//        exclude 'META-INF/NOTICE'
//        exclude 'META-INF/LICENSE'
//        exclude 'META-INF/LICENSE.txt'
//        exclude 'META-INF/NOTICE.txt'
//    }

    compileSdkVersion app_android.compileSdkVersion

    defaultConfig {
        applicationId "com.ghl"
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName
        vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
            testProguardFile 'proguard-test-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }
    }
//    sourceSets {
//        main {
////            java.srcDirs = ['src/main/java', 'src/main/aidl']
////            resources.srcDirs = ['src/main/java', 'src/main/aidl']
////            aidl.srcDirs = ['src/main/aidl']
//            jniLibs.srcDirs = ['libs']
//            if (mode) {
//                println "Lite模式依赖：${liteMode.asType(boolean)}"
//                manifest.srcFile "src/main/debug/AndroidManifest.xml"
//            } else {
//                println "非Lite模式依赖：$liteMode"
//                manifest.srcFile 'src/main/AndroidManifest.xml'
//            }
//        }
//    }

    //flutter相关声明
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//tasks.register("hello") {
//    doLast {
//        println("Hello from " + project.parent.name)
//    }
//}

def modules_biz = [
        ':biz_main',
        ':biz_login',
        ':biz_user',
        ':biz_track',
        ':opt_track',
        ':lib_common',
        ':opt_startup',
]

dependencies {
//    registerTransform(Unzip){
//        to.attribute()
//    }


    // 更简洁的方式，由于我们config那边定义的是 map，遍历
    app_implementation.each {
        k, v -> implementation v
    }
    modules_biz.each { biz ->
        implementation project(biz)
    }
}
