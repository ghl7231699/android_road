import com.ghl.plugin.RouterPlugin

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: RouterPlugin

def app_android = rootProject.ext.android
def app_implementation = rootProject.ext.app_implementation

android {

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    compileSdkVersion app_android.compileSdkVersion

    defaultConfig {
        applicationId "com.mmc.sample"
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName
        vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
            testProguardFile 'proguard-test-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            resources.srcDirs = ['src/main/java', 'src/main/aidl']
            aidl.srcDirs = ['src/main/aidl']
        }
    }

    //flutter相关声明
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def modules_biz = [
        ':biz_main',
        ':biz_login',
        ':biz_flutter',
        ':hot_fix',
        ':androidservice',
        ':flutter',
        ':lib_dirty',
        ':flutter_boost'
]

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    modules_biz.each { biz ->
        implementation project(biz)
    }
    // 更简洁的方式，由于我们config那边定义的是 map，遍历
    app_implementation.each {
        k, v -> implementation v
    }
}


//import com.xixi.plugin.asm.AutoMethodVisitor
//import org.objectweb.asm.AnnotationVisitor
//import org.objectweb.asm.MethodVisitor
//
//xiaozhu {
// 支持自定义配置,可选,默认空
//    matchData = [[
//                         //方法的匹配，可以通过类名或者实现的接口名匹配
//                         'ClassName'    : 'com.mmc.lamandys.liba_datapick.Counter2',
//                         'InterfaceName': '',
//                         'MethodName'   : 'test2',
//                         'MethodDes'    : '(Landroid/view/View;)V',
//                         'isAnnotation' : true,
//                         //插入的字节码，方法的执行顺序visitAnnotation->onMethodEnter->onMethodExit
//                         'MethodVisitor': {
//                             MethodVisitor methodVisitor, int access, String name, String desc ->
//                                 MethodVisitor adapter = new AutoMethodVisitor(methodVisitor, access, name, desc) {
//                                     boolean isAnnotation = false
//
//                                     @Override
//                                     protected void onMethodEnter() {
//                                         super.onMethodEnter()
//                                         //使用注解找对应方法的时候得加这个判断
//                                         if (!isAnnotation) {
//                                             return
//                                         }
//                                     }
//
//                                     @Override
//                                     protected void onMethodExit(int opcode) {
//                                         super.onMethodExit(opcode)
//                                         //使用注解找对应方法的时候得加这个判断
//                                         if (!isAnnotation) {
//                                             return
//                                         }
//                                         // INVOKESTATIC
//                                         methodVisitor.visitMethodInsn(184, "com/mmc/lamandys/liba_datapick/AutoHelper", "onClick2", "()V", false)
//                                     }
//
//                                     /**
//                                      * 需要通过注解的方式加字节码才会重写这个方法来进行条件过滤
//                                      */
//                                     @Override
//                                     AnnotationVisitor visitAnnotation(String des, boolean visible) {
//                                         if (des == 'Lcom/xishuang/annotation/AutoCount;') {
//                                             println "注解匹配：" + des
//                                             isAnnotation = true
//                                         }
//                                         return super.visitAnnotation(des, visible)
//                                     }
//                                 }
//                                 return adapter
//                         }
//                 ],
//                 [
//                         //方法的匹配，可以通过类名或者实现的接口名匹配
//                         'ClassName'    : 'com.mmc.lamandys.liba_datapick.Counter',
//                         'InterfaceName': '',
//                         'MethodName'   : 'test',
//                         'MethodDes'    : '()V',
//                         'isAnnotation' : false,
//                         //插入的字节码，方法的执行顺序visitAnnotation->onMethodEnter->onMethodExit
//                         'MethodVisitor': {
//                             MethodVisitor methodVisitor, int access, String name, String desc ->
//                                 MethodVisitor adapter = new AutoMethodVisitor(methodVisitor, access, name, desc) {
//
//                                     @Override
//                                     protected void onMethodEnter() {
//                                         super.onMethodEnter()
//                                     }
//
//                                     @Override
//                                     protected void onMethodExit(int opcode) {
//                                         super.onMethodExit(opcode)
//                                         // INVOKESTATIC
//                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mmc/lamandys/liba_datapick/AutoHelper", "onClick3", "()V", false)
//                                     }
//                                 }
//                                 return adapter
//                         }
//                 ],
//                 [
//                         //方法的匹配，可以通过类名或者实现的接口名匹配
//                         'ClassName'    : 'android.support.v7.widget.RecyclerView',
//                         'InterfaceName': 'com.mmc.lamandys.liba_datapick.Counter3',
//                         'MethodName'   : 'clearOnChildAttachStateChangeListeners',
//                         'MethodDes'    : '()V',
//                         'isAnnotation' : false,
//                         //插入的字节码，方法的执行顺序visitAnnotation->onMethodEnter->onMethodExit
//                         'MethodVisitor': {
//                             MethodVisitor methodVisitor, int access, String name, String desc ->
//                                 MethodVisitor adapter = new AutoMethodVisitor(methodVisitor, access, name, desc) {
//
//                                     @Override
//                                     protected void onMethodEnter() {
//                                         super.onMethodEnter()
//                                     }
//
//                                     @Override
//                                     protected void onMethodExit(int opcode) {
//                                         super.onMethodExit(opcode)
//                                         // INVOKESTATIC
//                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mmc/lamandys/liba_datapick/AutoHelper", "onClick", "()V", false)
//                                     }
//                                 }
//                                 return adapter
//                         }
//                 ]
//    ]
//}

